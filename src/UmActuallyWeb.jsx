/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 umActuallyWeb.glb -K
*/

import React, {useEffect, useRef} from 'react'
import {DeviceOrientationControls, Html, useGLTF, useTexture} from '@react-three/drei'
import * as THREE from "three";
import {useFrame, useThree} from "@react-three/fiber";

export function UmActuallyWeb(props) {

  const { nodes, materials } = useGLTF('/umActuallyWeb.glb')
  const propsTexture = useTexture('/PropsTexture.webp')
  const setTexture = useTexture('/SetTexture.webp')
  const umTexture = useTexture('/UmTexture.webp')
  const glassMaterial = new THREE.MeshBasicMaterial({
    color: "#fff", opacity: 0.5, transparent: true
  })
  const camera = useThree((state)=> state.camera)
  let fov = 50/*
  useEffect(() => {
    switch (props.cameraPosition) {
      case 1:
        camera.position.set(...nodes.trappSpot.position)
        console.log("pos 1", ...nodes.trappSpot.position)
        break
      case 2:
        camera.position.set(...nodes.redSpot.position)
        console.log("pos 2", ...nodes.redSpot.position)
        break
      case 3:
        camera.position.set(...nodes.blueSpot.position)
        console.log("pos 3", ...nodes.blueSpot.position)
        break
      case 4:
        camera.position.set(...nodes.orangeSpot.position)
        console.log("pos 4", ...nodes.orangeSpot.position)
        break
    }
  }, [])*/
  useFrame(()=>{
    if (camera.fov !== fov){
      camera.fov += (fov - camera.fov) * 0.25
      camera.updateProjectionMatrix()
    }
  })

  return (
    <group {...props} dispose={null}>
      <group onClick={()=> fov = Math.floor(Math.random() * (100 - 25 + 1)) + 25}>
        <group position={[-1.22, 0.85, -1.72]} />
        <group position={[-1.82, 0.85, -1.11]} />
        <group position={[-0.6, 0.85, -2.32]} />
        <group position={[-2.49, 0.61, -2.16]} rotation={[0, -0.79, 0]}>
          {/*<Html>
            <div className="text-rRed">1</div>
          </Html>*/}
        </group>
        <group position={[-1.42, 0.61, -3.21]} rotation={[0, -0.79, 0]}>
          {/*<Html>
            <div className="text-rRed">2</div>
          </Html>*/}
        </group>
        <group position={[-1.95, 0.61, -2.68]} rotation={[0, -0.79, 0]}>
          {/*<Html>
            <div className="text-rRed">3</div>
          </Html>*/}
        </group>
        <group position={[1.8, 0.61, -2.88]} rotation={[0, -0.79, 0]}>
          {/*<Html>
            <div className="text-rRed">4</div>
          </Html>*/}
        </group>
        <mesh geometry={nodes.Props.geometry} position={[-0.17, -0.05, 0.26]} rotation={[0, -0.79, 0]}>
          <meshBasicMaterial map={propsTexture} map-flipY={ false }/>
        </mesh>
        <mesh geometry={nodes.Set.geometry} position={[0.01, 1.58, -5.46]} rotation={[0, 1.57, 0]}>
          <meshBasicMaterial map={setTexture} map-flipY={ false }/>
        </mesh>
        <mesh geometry={nodes.Um.geometry} position={[0.98, 2.37, -5.37]} rotation={[Math.PI / 2, 0, 0]} scale={1.43}>
          <meshBasicMaterial map={umTexture} map-flipY={ false }/>
        </mesh>
        <mesh geometry={nodes.Glass.geometry} material={glassMaterial} position={[-0.17, -0.05, 0.26]} rotation={[0, -0.79, 0]} />
      </group>
    </group>
  )
}

useGLTF.preload('/umActuallyWeb.glb')
